#!/bin/bash

# report on changes to specified files from day to day
# (ccravens, 2013-06-26)

# BUGS:

# - Currently, an empty exclude file will cause it to fail by 'grep
#   -v' on an empty string.

# to see all files freely, this probably needs to run as root.  You
# can run it as an unpriviledged user, but you'll have to verify that
# the user can read all the necessary paths.

logkeepdays=2

appname=monitorfiles

confdir=/etc/$appname
logdir=/var/log/$appname

# use a timestamp with minutes so we can run multiple times a day if
# we want; do this here so that we get the same time across all logs
# instead of updating the time for every directory, etc.
timestamp=$(date +%Y%m%d%H%M)

if [[ ! -e $logdir ]]; then
    mkdir -p $logdir || { echo "ERROR: Cannot create $logdir"; exit 100; }
fi

# find the first file list data file in the 'path'
# these are in reverse order of preference, as the loop won't
# abort... it will just return the *last* file found.
dirfiles=(
    "$confdir/dirlist.conf"
    'dirlist.conf'
)

exclfiles=(
    "$confdir/exclude.conf"
    'exclude.conf'
)

dirlistdat='';
for fn in ${dirfiles[@]}; do
    if [[ -r $fn ]]; then
        dirlistdat=$fn
    fi
done

excllistdat='';
for fn in ${exclfiles[@]}; do
    if [[ -r $fn ]]; then
        excllistdat=$fn
    fi
done

if [[ -z $dirlistdat ]]; then
    echo "ERROR: Cannot find a directory list."
    exit 100
fi

# get the list of directories to check
if [[ -f $dirlistdat && -r $dirlistdat ]]; then
    dirlist=( $(<$dirlistdat) )
else
    echo "ERROR: Cannot read $dirlistdat"
    exit 110
fi

# build exclude pattern...
if [[ -f $excllistdat && -r $excllistdat ]]; then
    excllist=$(cat $excllistdat |tr '\n' '|')
    excllist=${excllist%|}
else
    echo "ERROR: Cannot read $excllistdat"
    exit 110
fi

# take a snapshot of each directory
for fn in "${dirlist[@]}"; do
    if [[ -r $fn ]]; then
        logfile=$logdir/${fn//\//_}.log
        find $fn -type f -o -type d |grep -vE "($excllist)" \
            |xargs stat -c '%n %a %U:%G %Z %s' >$logfile

        # now compare today's snapshot with the previous snapshot
        lastfile=$(ls -t $logfile-* |head -n1)
        diff $lastfile $logfile
        mv $logfile $logfile-$timestamp
    else
        echo "WARNING: Cannot open $fn" >&2
        # don't exit on warning
    fi

done

# clean up snapshots older than threshold
find $logdir -name '*.log-*' -mtime +$logkeepdays -daystart \
    |xargs --no-run-if-empty rm

exit
 
